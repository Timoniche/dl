# -*- coding: utf-8 -*-
"""InceptionV3_tmp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11ZFYuQxQoGTeYsKVm6CQo5LgKqGfpJxi
"""

import torch
from torch import nn


# (3,32,1,0)
# ker, out, str, pad
class CNNBlock(nn.Module):
    def __init__(self, in_channels, cnv):
        super(CNNBlock, self).__init__()
        self.layers = nn.Sequential(
            nn.Conv2d(in_channels, cnv[1], bias=False, kernel_size=cnv[0], stride=cnv[2], padding=cnv[3]),
            nn.BatchNorm2d(cnv[1]),
            nn.LeakyReLU(0.1),
        )

    def forward(self, x):
        return self.layers(x)


class InceptionBlockA(nn.Module):
    def __init__(self, in_channels, pool_features):
        super(InceptionBlockA, self).__init__()
        self.br1x1 = CNNBlock(in_channels, (1, 64, 1, 0))

        self.br5x5 = nn.Sequential(
            CNNBlock(in_channels, (1, 48, 1, 0)),
            CNNBlock(48, (5, 64, 1, 2))
        )

        self.br3x3x2 = nn.Sequential(
            CNNBlock(in_channels, (1, 64, 1, 0)),
            CNNBlock(64, (3, 96, 1, 1)),
            CNNBlock(96, (3, 96, 1, 1)),
        )
        self.brpool = nn.Sequential(
            nn.AvgPool2d(3, stride=1, padding=1),
            CNNBlock(in_channels, (1, pool_features, 1, 0)),
        )

    def forward(self, x):
        return torch.concat([self.br1x1(x),
                             self.br5x5(x),
                             self.br3x3x2(x),
                             self.brpool(x)],
                            axis=1)


class InceptionBlockB(nn.Module):
    def __init__(self, in_channels):
        super(InceptionBlockB, self).__init__()
        self.br3x3 = nn.Sequential(
            CNNBlock(in_channels, (3, 384, 2, 0)),
        )

        self.br3x3x3 = nn.Sequential(
            CNNBlock(in_channels, (1, 64, 1, 0)),
            CNNBlock(64, (3, 96, 1, 1)),
            CNNBlock(96, (3, 96, 2, 0)),
        )
        self.brpool = nn.MaxPool2d(kernel_size=3, stride=2)

    def forward(self, x):
        return torch.concat(
            [
                self.br3x3(x),
                self.br3x3x3(x),
                self.brpool(x)
            ],
            axis=1
        )


class InceptionBlockC(nn.Module):
    def __init__(self, in_channels, c7):
        super(InceptionBlockC, self).__init__()
        self.br1x1 = CNNBlock(in_channels, (1, 192, 1, 0))

        self.br7x7x3 = nn.Sequential(
            CNNBlock(in_channels, (1, c7, 1, 0)),
            CNNBlock(c7, ((1, 7), c7, 1, (0, 3))),
            CNNBlock(c7, ((7, 1), 192, 1, (3, 0))),
        )
        self.br7x7x5 = nn.Sequential(
            CNNBlock(in_channels, (1, c7, 1, 0)),
            CNNBlock(c7, ((7, 1), c7, 1, (3, 0))),
            CNNBlock(c7, ((1, 7), c7, 1, (0, 3))),
            CNNBlock(c7, ((7, 1), c7, 1, (3, 0))),
            CNNBlock(c7, ((1, 7), 192, 1, (0, 3))),
        )
        self.brpool = nn.Sequential(
            nn.AvgPool2d(3, stride=1, padding=1),
            CNNBlock(in_channels, (1, 192, 1, 0)),
        )

    def forward(self, x):
        return torch.concat([self.br1x1(x),
                             self.br7x7x3(x),
                             self.br7x7x5(x),
                             self.brpool(x)],
                            axis=1)


class InceptionBlockD(nn.Module):
    def __init__(self, in_channels):
        super(InceptionBlockD, self).__init__()
        self.br3x3x2 = nn.Sequential(
            CNNBlock(in_channels, (1, 192, 1, 0)),
            CNNBlock(192, (3, 320, 2, 0)),
        )

        self.br7x7x4 = nn.Sequential(
            CNNBlock(in_channels, (1, 192, 1, 0)),
            CNNBlock(192, ((1, 7), 192, 1, (0, 3))),
            CNNBlock(192, ((7, 1), 192, 1, (3, 0))),
            CNNBlock(192, (3, 192, 2, 0)),
        )
        self.brpool = nn.MaxPool2d(kernel_size=3, stride=2)

    def forward(self, x):
        return torch.concat([self.br3x3x2(x),
                             self.br7x7x4(x),
                             self.brpool(x)],
                            axis=1)


class InceptionBlockE(nn.Module):
    def __init__(self, in_channels):
        super(InceptionBlockE, self).__init__()
        self.br1x1 = CNNBlock(in_channels, (1, 320, 1, 0))

        self.br3x3_0 = CNNBlock(in_channels, (1, 384, 1, 0))
        self.br3x3_01 = CNNBlock(384, ((1, 3), 384, 1, (0, 1)))
        self.br3x3_02 = CNNBlock(384, ((3, 1), 384, 1, (1, 0)))

        self.br3x3x2_0 = nn.Sequential(
            CNNBlock(in_channels, (1, 448, 1, 0)),
            CNNBlock(448, (3, 384, 1, 1)),
        )
        self.br3x3x2_01 = CNNBlock(384, ((1, 3), 384, 1, (0, 1)))
        self.br3x3x2_02 = CNNBlock(384, ((3, 1), 384, 1, (1, 0)))

        self.brpool = nn.Sequential(
            nn.AvgPool2d(3, stride=1, padding=1),
            CNNBlock(in_channels, (1, 192, 1, 0)),
        )

    def forward(self, x):
        br3x3_0 = self.br3x3_0(x)
        br3x3_0 = torch.concat([self.br3x3_01(br3x3_0),
                                self.br3x3_02(br3x3_0)], axis=1)
        br3x3x2_0 = self.br3x3x2_0(x)
        br3x3x2_0 = torch.concat([self.br3x3x2_01(br3x3x2_0),
                                  self.br3x3x2_02(br3x3x2_0)], axis=1)
        return torch.concat([self.br1x1(x),
                             br3x3_0,
                             br3x3x2_0,
                             self.brpool(x)],
                            axis=1)


class InceptionAux(nn.Module):
    def __init__(self, in_channels, num_classes):
        super(InceptionAux, self).__init__()
        self.layer = nn.Sequential(
            nn.AvgPool2d(5, stride=3),
            CNNBlock(in_channels, (1, 128, 1, 0)),
            CNNBlock(128, (5, 768, 1, 0)),
            nn.AdaptiveAvgPool2d((1, 1)),
            nn.Flatten(1),
            nn.Linear(768, num_classes)
        )

    def forward(self, x):
        return self.layer(x)


class InceptionV3(nn.Module):

    def __init__(self, num_classes, use_head_outs=False):
        super(InceptionV3, self).__init__()

        self.back_bone0 = nn.Sequential(
            # 299 299 3
            CNNBlock(3, (3, 32, 2, 0)),
            CNNBlock(32, (3, 32, 1, 0)),
            CNNBlock(32, (3, 64, 1, 1)),
            nn.MaxPool2d(kernel_size=3, stride=2),
            CNNBlock(64, (1, 80, 1, 0)),
            CNNBlock(80, (3, 192, 1, 0)),
            nn.MaxPool2d(kernel_size=3, stride=2),
            InceptionBlockA(192, 32),
            InceptionBlockA(256, 64),
            InceptionBlockA(288, 64),
            InceptionBlockB(288),
            InceptionBlockC(768, 128),
            InceptionBlockC(768, 160),
            InceptionBlockC(768, 160),
            InceptionBlockC(768, 192),
        )
        self.side_head = InceptionAux(768, num_classes)
        self.back_bone1 = nn.Sequential(
            InceptionBlockD(768),
            InceptionBlockE(1280),
            InceptionBlockE(2048),
            nn.AdaptiveAvgPool2d((1, 1)),
            nn.Dropout(),
            nn.Flatten(1),
        )
        self.fc = nn.Linear(2048, num_classes)

    def forward(self, x):
        x = self.back_bone0(x)
        side_head = None
        if (self.training):
            side_head = self.side_head(x)
        x = self.back_bone1(x)
        x = self.fc(x)

        return x, side_head
